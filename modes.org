* Modes
  :PROPERTIES:
  :tangle:   init.el
  :END:

  Modes bring significant functionality into Emacs.

  These are the modes that I use.

  I've also added associated configuration.

** Package Intallation

  I get packages by typing M-x package-list-packages, then browsing
  through what I see there, and then pressing an 'i' with my cursor on
  the name and finally pressing an 'x' to make it so.

  However, while I was reading through Sacha Chua's emacs
  configuration, I came across this function that I've started using
  and that's used below.

#+begin_src emacs-lisp
  (defun sacha/package-install (package &optional repository)
    "Install PACKAGE if it has not yet been installed.
  If REPOSITORY is specified, use that."
    (unless (package-installed-p package)
      (let ((package-archives (if repository
                                  (list (assoc repository package-archives))
                                package-archives)))
      (package-install package))))
#+end_src

  I copied her stuff in directly above and use it below.

  Here's a link to her blog post where I found her configuration:
  [[http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/][Literate programming and my Emacs configuration file]].

  Here's a link to my package configuration in [[file:general-setup.org][general.org]].

** General Package Listing

  These are packages that I mainly use for syntax highlighting.

*** markdown-mode

  I write in Markdown all the time, and sometimes I use the
  "compilation" facility of this mode.

  If you do start using the compilation aspect, you'll need a command
  line "markdown" to execute.

  I got markdown with a `brew install markdown`.

  My notes indicate that:

    You can change the markdown executable, or read more about the
    mode, here: http://jblevins.org/projects/markdown-mode/

    Also, Highlights:

    + C-c C-c p: Run markdown on buffer contents. Open result in
      browser.

  I started using markdown-mode+ recently, and I did so after doing a
  bunch of work to get pandoc installed and working with Emacs.

#+begin_src emacs-lisp
  (sacha/package-install 'markdown-mode)
  (sacha/package-install 'markdown-mode+)
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
#+end_src

*** puppet-mode

#+begin_src emacs-lisp
  (sacha/package-install 'puppet-mode)
  (add-to-list 'auto-mode-alist '("\\.pp$" . puppet-mode))
#+end_src

*** haml-mode

#+begin_src emacs-lisp
  (sacha/package-install 'haml-mode)
#+end_src
*** yaml-mode

#+begin_src emacs-lisp
  (sacha/package-install 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src
*** starter-kit-lisp

  I don't do lisp often, but I find starter-kit-lisp helps me out
  when I do.

#+begin_src emacs-lisp
  (sacha/package-install 'starter-kit-lisp)
#+end_src

*** coffee-mode

#+begin_src emacs-lisp
  (sacha/package-install 'coffee-mode)
#+end_src

** Ruby Packages

  I really enjoy writing ruby.

  At a high level, my MacOS has RVM installed from http://rvm.io.

  Then, my emacs uses a package named rvm that understands how
  http://rvm.io works, and can direct emacs to use any of the various
  rubies that rvm provides.

  I explicitly use the default ruby from RVM, but Emacs also updates
  the ruby I'm using each time I start editing a file in ruby-mode. I
  think this works by looking at the location of the file I'm editing,
  looking "up" to find the associated .rvmrc or .ruby-version, and
  then activating it.

  With all of that said, my main flow is to run rspec and cucumber
  from within emacs. This capability is provided by feature-mode and
  rspec-mode.

  The main key bindings I use are:

    + C-c , v

      Run rspec or cucumber against the file I'm editing

    + C-c , s

      Run rspec or cucumber against the single line of the spec or
      feature I'm editing.

*** rvm

#+begin_src emacs-lisp
  (sacha/package-install 'rvm)
#+end_src

  For emacs, on a MacOS, I believe the following configures my setup
  so that I'll use the default ruby provided by RVM when I need ruby.

#+begin_src emacs-lisp
  (rvm-use-default)
#+end_src

  I was reading a [[http://devblog.avdi.org/2011/10/11/rvm-el-and-inf-ruby-emacs-reboot-14/][blog post by Avdi Grimm about how he was using RVM]]
  the other day, and that's where I picked up the following helpful
  snippet that works with the emacs rvm subsystem to activate the
  correct version of ruby each time you open a ruby-based file:

#+begin_src emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda () (rvm-activate-corresponding-ruby)))
#+end_src
*** feature-mode

  I don't often write Gherkin at work, but I do try to use Cucumber
  whenever I get the chance on side projects. So far I've been using
  this mode mainly for syntax highlighting.

#+begin_src emacs-lisp
  (sacha/package-install 'feature-mode)
#+end_src

*** rspec-mode

  I *love* rspec.

#+begin_src emacs-lisp
  (sacha/package-install 'rspec-mode)
#+end_src

  I also have been using ZSH, and when I was getting rspec-mode up and
  running a few months ago, I'm pretty sure I found the following
  advice somewhere (I know I didn't come up with this myself..)

#+begin_src emacs-lisp
  (defadvice rspec-compile (around rspec-compile-around)
    "Use BASH shell for running the specs because of ZSH issues."
    (let ((shell-file-name "/bin/bash"))
      ad-do-it))
  (ad-activate 'rspec-compile)
#+end_src

*** ruby-mode

  For now, the main thing I do is turn on ruby-mode when I'm
  editing well known file types:

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Vagrantfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.thor$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Thorfile$" . ruby-mode))
#+end_src

*** ruby-electric

    This minor mode automatically inserts a right brace when you
    enter a left brace, or an "end" when you define a def.

#+begin_src emacs-lisp
  (sacha/package-install 'ruby-electric)
#+end_src

** Magit

  I *love* magit.

  I get Magit through emacs-starter-kit, but I use the following
  configuration and setup.

  This comes from two blog posts: [[http://whattheemacsd.com/setup-magit.el-01.html][Setup Magit #1]] and [[http://whattheemacsd.com/setup-magit.el-02.html][Setup Magit #2]].

  As you can read in the blog posts, the main points of this lisp are:

  + Give Magit full screen when you start it.

  + Setup Magit so that pressing "q" gets rid of full screen.

  + Setup Magit so that pressing "W" toggles paying attention to
    whitespace.

#+begin_src emacs-lisp
  (require 'magit)

  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

  (defun magit-toggle-whitespace ()
    (interactive)
    (if (member "-w" magit-diff-options)
        (magit-dont-ignore-whitespace)
      (magit-ignore-whitespace)))

  (defun magit-ignore-whitespace ()
    (interactive)
    (add-to-list 'magit-diff-options "-w")
    (magit-refresh))

  (defun magit-dont-ignore-whitespace ()
    (interactive)
    (setq magit-diff-options (remove "-w" magit-diff-options))
    (magit-refresh))

  (define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace)
#+end_src
** yasnippet

  I don't understand or use snippets as much as I should.

  My favorite to use is 'dbg,' which I found in Jim Weirich's emacs
  setup [[https://github.com/jimweirich/emacs-setup/blob/master/snippets/text-mode/ruby-mode/dbg][here]].

#+begin_src emacs-lisp
  (sacha/package-install 'yasnippet)
  (require 'yasnippet)
  (setq yas-snippet-dirs (concat esk-user-dir "/snippets"))
#+end_src

  I see the following in the official documentation, and my snippets
  don't pop in ruby-mode without it:

#+begin_src emacs-lisp
  (yas-global-mode 1)
#+end_src

** org-mode

  OrgMode is a large thing.

*** Defaults

  When I open a .org file, I like to see all of the headlines but
  none of the text:

#+begin_src emacs-lisp
  (setq org-startup-folded 'content)
#+end_src

  Hiding the stars looks cleaner to me:

#+begin_src emacs-lisp
  (setq org-hide-leading-stars 'hidestars)
#+end_src

*** Code Blocks

  These emacs configuration files (.org, .el) use org's "code blocks"
  extensively, and the following has Emacs pay attention to the type
  of code within the blocks.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

**** Editing Code Blocks

  With your cursor over one of these code blocks you can type C-c '
  and a new buffer will open for editing just that content.

**** Executing Code Blocks

  With your cursor over one of these code blocks you can type C-c C-c
  and, if the code block is one of the languages that has been
  configured to be run, the block will be executed and the results
  printed nearby.

  By default, only emacs-lisp is configured to be executed.
  The following block makes it so that ruby is too.

  Here's the documentation for this: [[http://orgmode.org/worg/org-contrib/babel/languages.html][babel/languages]].

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)))
#+end_src

** Packages I used once, and may use again

  + dired-details
  + dired-details+
  + web
  + dash
  + s
  + projectile
** Themes

I have been goofing around with the following themes:

cyberpunk-theme, tangotango-theme
