* Key Bindings
  :PROPERTIES:
  :tangle:   init.el
  :END:

  I think my main inspiration for keybindings have come from [[https://github.com/technomancy/emacs-starter-kit/blob/v2/modules/starter-kit-bindings.el][ESK]] and
  from [[https://github.com/magnars/.emacs.d/blob/master/key-bindings.el][Magnars]].

  Documenting (and configuring) keybindings is somewhat strange. These
  things "appear" out of no where, and don't always follow an obvious
  order. At any rate.. here we go.

** Running Methods

  When it comes to running methods explicitly, I always use C-x C-m.
  I picked this up from Steve Yegge's [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]].

#+begin_src emacs-lisp
  (global-set-key "\C-x\C-m" 'execute-extended-command)
#+end_src

** Text Size

  Making text larger or smaller (at your quick command..) is absolutely
  necessary and is something I use every day, several times a day.

  This happens most commonly when I'm showing someone something in
  emacs (say, pairing or running a meeting), but also when I'm at home
  and don't have my glasses.

  These particular keybindings are all about the + and the -.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src

** Goto Line

  The following makes it so that when I press C-x g I can expect to be
  prompted to enter a line number to jump to it:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x g") 'goto-line)
#+end_src

  And the elisp below makes it so that whatever goto-line was bound to
  is now bound to a new function: goto-line-with-feedback.

  In turn, goto-line-with-feedback modifies the buffer you're working
  in to show line numbers but only when you are actively looking to
  pick a number.

  The point of showing line numbers is to give you an idea of where
  you'll end up.

  The point of *only* showing them while going to a line is to keep
  the screen free of distractions (line numbers) unless it is helpful.

  This comes from [[http://whattheemacsd.com/key-bindings.el-01.html][this post]] within "what the emacs.d."

#+begin_src emacs-lisp
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (linum-mode 1)
          (goto-line (read-number "Goto line: ")))
      (linum-mode -1)))
#+end_src

** Magit

  Magit is everyone's favorite piece of software.

  I like to think "C-x m"agit.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x m") 'magit-status)
#+end_src

** MacOS's "Command"

  I think keys called 'super' and 'hyper' used to appear on the
  keyboards of fabled 'Lisp Machines,' as described in this ErgoEmacs
  post about [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Super and Hyper Keys]].

  I may end up taking advantage of these some day, but for now I'm
  happy to have both the 'alt/option' key and the 'command' key on my
  Mac do the same thing: meta.

  And, given the default setup of my brew installed emacs, the
  following change makes it so that "command does meta"

  If I'm back this way in the future again, I'd like to remind myself
  to consider the following variables: mac-option-modifier,
  mac-command-modifier, and ns-function-modifer.

#+begin_src emacs-lisp
  (setq mac-command-modifier 'meta)
#+end_src

** Movement

   I rely on standard emacs commands to move around, with the
   following enhancements:

*** Using shift makes standard movement 5x faster

    This comes from Magnars in this [[http://whattheemacsd.com/key-bindings.el-02.html][post of whattheemacsd.com]].

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 5))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 5))))
#+end_src

*** Move current line up or down

    This matches what Magnars says in [[http://whattheemacsd.com/editing-defuns.el-02.html][this post]], except I also use
    META.

#+begin_src emacs-lisp
  (defun move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines 1))
      (forward-line)
      (move-to-column col)))

  (defun move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines -1))
      (move-to-column col)))
  (global-set-key (kbd "<C-M-S-down>") 'move-line-down)
  (global-set-key (kbd "<C-M-S-up>") 'move-line-up)
#+end_src

** Not Yet Transferred

(progn

  ;; Magnars:
  ;; I don't need to kill emacs that easily
  ;; the mnemonic is C-x REALLY QUIT
  (global-set-key (kbd "C-x r q") 'save-buffers-kill-terminal)
  (global-set-key (kbd "C-x C-c") 'delete-frame)


  ;; Technomancy:
  ;; Use regex searches by default.
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "\C-r") 'isearch-backward-regexp)
