* Key Bindings

  My main inspiration for keybindings have come from [[https://github.com/technomancy/emacs-starter-kit/blob/v2/modules/starter-kit-bindings.el][ESK]] and from
  [[https://github.com/magnars/.emacs.d/blob/master/key-bindings.el][Magnars]].

  If a particular mode has a global keybinding, then they keybinding
  will be with the mode in modes.org.

** See Occurrences while Searching

   If you are searching for something, and you press =C-o=, you can
   see all of the occurrences of that something within the file. Once
   that *Occur* window comes up, you can press =e= to start
   editing. You can press =C-c C-c= to get out of it.

#+BEGIN_SRC emacs-lisp
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+END_SRC

** Running Methods

   When it comes to running methods explicitly, I always use C-x C-m.
   I picked this up from Steve Yegge's [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]]. He says use
   =execute-extended-command=, but I always use smex.

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-m" 'smex)
#+END_SRC

** Text Size

   Making text larger or smaller with ease is something I use every
   day, several times a day. This happens most commonly when I am
   showing someone something in emacs (say, pairing or running a
   meeting), but also when I am at home and do not have my glasses.
   These particular keybindings are all about the =+= and the =-=.

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Goto Line

  The following makes it so that when I press =C-x g= I can expect to
  be prompted to enter a line number to jump to it.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'goto-line)
#+END_SRC

  And the elisp below makes it so that whatever goto-line was bound to
  is now bound to a new function: goto-line-with-feedback.

  In turn, goto-line-with-feedback modifies the buffer you are working
  in to show line numbers but only when you are actively looking to
  pick a number.

  The point of showing line numbers is to give you an idea of where
  you will end up.

  The point of *only* showing them while going to a line is to keep
  the screen free of distractions (line numbers) unless it is helpful.

  This comes from [[http://whattheemacsd.com/key-bindings.el-01.html][this post]] within "what the emacs.d."

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (linum-mode 1)
          (goto-line (read-number "Goto line: ")))
      (linum-mode -1)))
#+END_SRC

  Finally, from rdallasgray's [[https://github.com/rdallasgray/graphene][Graphene]], sometimes the line numbers
  look weird, so we give them some extra space.

#+BEGIN_SRC emacs-lisp
  (setq linum-format " %4d ")
#+END_SRC

** MacOS's "Command"

   I think keys called 'super' and 'hyper' used to appear on the
   keyboards of fabled 'Lisp Machines,' as described in this ErgoEmacs
   post about [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Super and Hyper Keys]]. I may take advantage of these some
   day, but for now I am happy to have both the 'alt/option' key and
   the 'command' key on my Mac do the same thing: meta.

   Given the default setup of my brew installed emacs, the following
   change makes it so that "command does meta"

   If I am back this way in the future again, I'd like to remind
   myself to consider the following variables: mac-option-modifier,
   mac-command-modifier, and ns-function-modifer.

#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
#+END_SRC

** Movement

   I rely on standard emacs commands to move around, with the
   following enhancements:

*** Using shift makes standard movement 5x faster

    This comes from Magnars in this [[http://whattheemacsd.com/key-bindings.el-02.html][post of whattheemacsd.com]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 5))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 5))))
#+END_SRC

*** Move current line up or down

    This matches what Magnars says in [[http://whattheemacsd.com/editing-defuns.el-02.html][this post]], except I also use
    META.

#+BEGIN_SRC emacs-lisp
  (defun move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines 1))
      (forward-line)
      (move-to-column col)))

  (defun move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines -1))
      (move-to-column col)))
  (global-set-key (kbd "<C-M-S-down>") 'move-line-down)
  (global-set-key (kbd "<C-M-S-up>") 'move-line-up)
#+END_SRC

** Window Management

   I usually focus on a single buffer at a time, but sometimes I
   split vertically or horizontally (and possibly split again..) and
   when I do I like to control the size of the buffer I am presently
   typing in with the following key bindings:

   |-------------------+--------|
   | Vertical Expand   | CTRL-> |
   | Vertical Shrink   | CTRL-< |
   |-------------------+--------|
   | Horizontal Expand | CTRL-. |
   | Horizontal Shrink | CTRL-, |
   |-------------------+--------|

   These keybindings (and the elisp that makes them possible) come
   from rdallasgray's graphene package.

   See [[https://github.com/rdallasgray/graphene/blob/master/graphene-helper-functions.el#L89][graphene-helper-functions.el]].

   Graphene is awesome. On my (North American) keyboard these keys are
   right next to each other in a similar fashion as are the + and -
   which are used above in conjunction with CTRL to increase and
   decrease text scale.

   CTRL- collides with =org-cycle-agenda-files= when in org-mode, and
   I'd like decrease-window-width to take precedence.

#+BEGIN_SRC emacs-lisp
  (defun increase-window-height (&optional arg)
    "Make the window taller by one line. Useful when bound to a repeatable key combination."
    (interactive "p")
    (enlarge-window arg))

  (defun decrease-window-height (&optional arg)
    "Make the window shorter by one line. Useful when bound to a repeatable key combination."
    (interactive "p")
    (enlarge-window (- 0 arg)))

  (defun decrease-window-width (&optional arg)
    "Make the window narrower by one line. Useful when bound to a repeatable key combination."
    (interactive "p")
    (enlarge-window (- 0 arg) t))

  (defun increase-window-width (&optional arg)
    "Make the window shorter by one line. Useful when bound to a repeatable key combination."
    (interactive "p")
    (enlarge-window arg t))

  (global-set-key (kbd "C->")
                  'increase-window-height)

  (global-set-key (kbd "C-<")
                  'decrease-window-height)

  (global-set-key (kbd "C-,")
                  'decrease-window-width)

  (global-set-key (kbd "C-.")
                  'increase-window-width)

  (add-hook 'org-mode-hook
            (lambda ()
              (define-key org-mode-map [(ctrl \,)]
                'decrease-window-width)))
#+END_SRC

** New Buffers

   Create a new buffer.

   This comes from Graphene.

#+BEGIN_SRC emacs-lisp
  (defun create-new-buffer ()
    "Create a new buffer named *new*[num]."
    (interactive)
    (switch-to-buffer (generate-new-buffer-name "*new*")))

  (global-set-key (kbd "C-c n")
                  'create-new-buffer)
#+END_SRC

** New Instances of Emacs

   It is usually the case that a single instance of emacs is dedicated
   to a single project. Before I did project management this way, I
   only had a single instance of emacs, ever.

   This comes from Graphene.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (defun new-emacs-instance ()
      (interactive)
      (let ((path-to-emacs
             (locate-file invocation-name
                          (list invocation-directory) exec-suffixes)))
        (call-process path-to-emacs nil 0 nil)))

    (global-set-key (kbd "C-c N")
                    'new-emacs-instance))
#+END_SRC
** Newline Anywhere

   Press "M-RET" and get a new line that's indented. The intent is
   that can press it when you are at the beginning of a line, in the
   middle of a line, or at the end of a line.

   This is from Graphene.

#+BEGIN_SRC emacs-lisp
  (defun newline-anywhere ()
    "Add a newline from anywhere in the line."
    (interactive)
    (end-of-line)
    (newline-and-indent))

  (global-set-key (kbd "M-RET")
                  'newline-anywhere)
#+END_SRC
