* Major Modes, Minor Modes, and Packages

  Major and Minor Modes are one avenue that bring significant
  functionality into Emacs.

  The difference between Major and Minor Mode is that only a single
  Major mode may be in use at a time. A Major Mode typically defines
  the type of document that you are creating, while a Minor Mode
  provides conveniences that may be helpful with many types of files.

  =org-mode=, =text-mode=, and =ruby-mode= are all major modes. They
  are used to create files of a certain type (org, text, and
  ruby). They define keybindings. They define how documents should be
  displayed and interacted with.

  =auto-fill= is a minor mode. It helps you "toggle automatic line
  breaking," which is helpful in =org-mode=, but also in =text-mode=
  and =ruby-mode=.

  Finally, functionality can be delivered independently from a
  mode. For example, a library like =better-defaults= can provide
  elisp code that configures emacs regardless of whether or not you
  ever make use of =org-mode= (a major mode) or =auto-fill-mode= (a
  minor mode).

  This section describes the core modes that I use, and how they are
  configured. It breaks down into Major Modes, Minor Modes, and
  Packages.

  Another way to organize this section is by functional topic. So, for
  example, put everything I do associated with setting up a Ruby
  environment into a general section regardless of whether it's
  achieved through using a major mode, minor mode, or package.

  The only topic organized in this manner is Project Management, which
  is in its own section.

** Getting Code

   My main method for retrieving and installing source code is via the
   bare package management system. When I'd like to try something out,
   I type =M-x package-list-packages= and look around. As you move
   throughout the resulting buffer, if you see something you like you
   can press =i= and the package on the same line as your cursor will
   be marked for an upcoming installation. When you are ready, press
   'x' to install each package that has been marked in this way.

   I'm using =pallet= and this means that changes made through this
   system will be written to my =~/.emacs.d/Cask= file. If I have
   additional configuration changes I'd like to make, I add a section
   in this file with those changes.

   Because of the way I'm using =emacs-setup=, I'll copy the
   ~/.emacs.d/Cask into wherever I've checked out =emacs-setup= as I
   make changes.

** Major Modes
*** Magit

    Everyone *loves* magit.

    I like to think "C-x m"agit.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x m") 'magit-status)
#+end_src

    Here are two great blog posts about magit: [[http://whattheemacsd.com/setup-magit.el-01.html][Setup Magit #1]] and
    [[http://whattheemacsd.com/setup-magit.el-02.html][Setup Magit #2]].  The main points are:

    + Give Magit full screen when you start it.

    + Setup Magit so that pressing "q" gets rid of full screen.

    + Setup Magit so that pressing "W" toggles paying attention to
      whitespace.

    I happen to have =emacsclient= installed in two places, one at
    =/usr/bin= and another at =/usr/local/bin=. The one at =/usr/bin=
    cannot find my emacs server and this causes Magit to freeze
    whenever I try to commit. This is why I explicitly set
    =magit-emacsclient-executable=.

#+begin_src emacs-lisp
  (require 'magit)

  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

  (defun magit-toggle-whitespace ()
    (interactive)
    (if (member "-w" magit-diff-options)
        (magit-dont-ignore-whitespace)
      (magit-ignore-whitespace)))

  (defun magit-ignore-whitespace ()
    (interactive)
    (add-to-list 'magit-diff-options "-w")
    (magit-refresh))

  (defun magit-dont-ignore-whitespace ()
    (interactive)
    (setq magit-diff-options (remove "-w" magit-diff-options))
    (magit-refresh))

  (define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace)

  (if (file-exists-p "/usr/local/bin/emacsclient")
      (setq magit-emacsclient-executable "/usr/local/bin/emacsclient"))

  (if (file-exists-p "/opt/boxen/homebrew/bin/emacsclient")
      (setq magit-emacsclient-executable "/opt/boxen/homebrew/bin/emacsclient"))
#+end_src

    In Magit, the variable =magit-diff-refine-hunk= controls the
    granularity that is displayed when it comes to diff-hunks. If you
    set it to "all" you get better insight into what's changed within
    a line.

#+BEGIN_SRC emacs-lisp
  (setq magit-diff-refine-hunk 'all)
#+END_SRC

*** org-mode

    OrgMode is a wonderful thing.

    I used to use it to track all of my time. That's stopped
    recently.

**** Key Bindings

     [[http://orgmode.org/manual/Activation.html#Activation][Org-mode documentation]] suggests that some functions be globally
     bound, and I follow their defaults:

#+begin_src emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src

**** Defaults

     When I open a .org file, I like to see all of the headlines but
     none of the text:

#+begin_src emacs-lisp
  (setq org-startup-folded 'content)
#+end_src

     Hiding the stars looks cleaner to me:

#+begin_src emacs-lisp
  (setq org-hide-leading-stars 'hidestars)
#+end_src

**** Recording Timestamps

     This setting makes it so that a timestamp is recorded whenever
     you mark a task as done. [[http://orgmode.org/manual/Closing-items.html#Closing-items][Manual entry]].

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

**** Clock

     These settings are necessary to clock history across emacs
     sessions according to [[http://orgmode.org/manual/Clocking-work-time.html][this documentation]].

#+begin_src emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+end_src

**** Diary

     Including the "diary" makes it so that your agenda has official
     holidays in it.

#+begin_src emacs-lisp
  (setq org-agenda-include-diary t)
#+end_src

**** Code Blocks

     These emacs configuration files (.org, .el) use org's "code
     blocks" extensively, and the following has Emacs pay attention to
     the type of code within the blocks.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

***** Editing Code Blocks

      With your cursor over one of these code blocks you can type C-c '
      and a new buffer will open for editing just that content.

***** Executing Code Blocks

      With your cursor over one of these code blocks you can type C-c
      C-c and, if the code block is one of the languages that has been
      configured to be run, the block will be executed and the results
      printed nearby.

      By default, only emacs-lisp is configured to be executed.  The
      following block makes it so that ruby and shell scripts are too.

      Here's the documentation for this: [[http://orgmode.org/worg/org-contrib/babel/languages.html][babel/languages]].

      I've stopped doing this as much as I did in the past.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (sh . t)))
#+end_src

**** Agenda, Tasks

     I will plan on keeping .org files underneath =~/notes/org=.

#+begin_src emacs-lisp
  (setq org-agenda-files '("~/notes/org"))
#+end_src

*** markdown-mode

    I write in Markdown all the time. I used to have emacs compile
    markdown in HTML, but I stopped. I prefer to use other tools to do
    this for me.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
#+end_src

*** coffee-mode

    CoffeeScript. It's a thing.

    I can initiate a translation of coffee into js with
    =coffee-compile-file=, and this is possible because I've done an
    =npm install -g coffee=. This means the =coffee= executable is
    installed at =/usr/share/local/npm/bin=. This directory is in the
    PATH of emacs via =jedcn-env-path=.

#+begin_src emacs-lisp
  (setq coffee-tab-width 2)
#+end_src

*** haml-mode

    I use this often, but I don't tweak it. It's in the Cask file as
    "haml-mode".

*** puppet-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pp$" . puppet-mode))
#+end_src

*** slim-mode

    I use this rarely, but I don't tweak it. It's in the Cask file as
    "slim-mode".

*** yaml-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src

*** js-mode

    I love JavaScript.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

*** feature-mode

  I don't often write Gherkin at work, but I do try to use Cucumber
  whenever I get the chance on side projects. So far I've been using
  this mode mainly for syntax highlighting.

*** ruby-mode

    I really enjoy writing ruby.

    At a high level, my MacOS has RVM installed from http://rvm.io.

    Then, my emacs uses a package named rvm that understands how
    http://rvm.io works, and can direct emacs to use any of the
    various rubies that rvm provides.

    I explicitly use the default ruby from RVM, but Emacs also updates
    the ruby I'm using each time I start editing a file in
    ruby-mode. I think this works by looking at the location of the
    file I'm editing, looking "up" to find the associated .rvmrc or
    .ruby-version, and then activating it.

    With all of that said, my main flow is to run rspec and cucumber
    from within emacs. This capability is provided by feature-mode and
    rspec-mode.

    The main key bindings I use are:

    + =C-c , v=

      Run rspec or cucumber against the file I'm editing

    + =C-c , s=

      Run rspec or cucumber against the single line of the spec or
      feature I'm editing.

    For now, the main thing I do is turn on ruby-mode when I'm
    editing well known file types:

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Vagrantfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.thor$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Thorfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Puppetfile$" . ruby-mode))
#+end_src

    Also, when you press return in ruby, go to a new line and indent
    rather than just going to a new line.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda ()
              (define-key (current-local-map) [remap newline] 'reindent-then-newline-and-indent)))
#+END_SRC

** Minor Modes
*** yasnippet

    My favorite snippet to use is =dbg=, which I found in Jim Weirich's
    emacs setup [[https://github.com/jimweirich/emacs-setup/blob/master/snippets/text-mode/ruby-mode/dbg][here]].

#+begin_src emacs-lisp
  (require 'yasnippet)
  (setq yas-snippet-dirs (concat jedcn-es/dir "/snippets"))
#+end_src

    When I was setting up yasnippet, I saw the following in the official
    documentation:

#+begin_src emacs-lisp
  (yas-global-mode 1)
#+end_src

*** smartparens

#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode +1)
#+END_SRC

*** ace-jump-mode

    I'm giving ace-jump-mode a try. I often search forward and
    backward to jump around, but maybe there's room for improvement.

    =C-c SPC= is recommended with the basic setup, and I hook into the
    org-mode-map so I can have a consistent binding there.

#+begin_src emacs-lisp
  (require 'ace-jump-mode)
  (define-key global-map
    (kbd "C-c SPC") 'ace-jump-mode)
  (add-hook 'org-mode-hook
            (lambda ()
              (define-key org-mode-map
                (kbd "C-c SPC") 'ace-jump-mode)))
#+end_src

*** flycheck

    This is pretty cool. I never got flymake working right, and this
    seems to "just do the right thing." Plus-- the documentation is
    quite good: http://flycheck.readthedocs.org/en/latest/

    The tools that I am powering flycheck with are:

    - jshint :: via =npm install -g jshint=
    - jsonlint :: via =npm install -g jsonlint=
    - coffeelint :: via =npm install -g coffeelint=

    I make sure these are available to emacs by making sure that the
    location that npm puts stuff (=/usr/local/share/npm/bin=) is in my
    =jedcn-env-path=.

    Sometimes "checkers" will fail, and I've found reading through the
    source the best way to troubleshoot. For example-- at one point I
    had a coffeelint that was old (say, 0.6.0) and the source of the
    checker indicated that you needed 1.0.0+, and so re-install was in
    order.

    Further-- sometimes the wrong checkers get loaded. For example--
    before I had json-mode, I'd use js-mode when dealing with a .json
    file, and this would load jshint, and jshint would puke on JSON.

    This directive causes it to be used everywhere:

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

    If things don't work, I'll see an error message briefly
    flash. This is annoying enough that I track down the problem even
    if I don't really care to have flycheck.

*** rspec-mode

    I *love* rspec.

    I also have been using ZSH, and when I was getting rspec-mode up
    and running a few months ago, I ran into trouble. Thankfully, the
    author of rspec mode had [[https://github.com/pezra/rspec-mode][a solution for using rspec mode with ZSH]].

#+begin_src emacs-lisp
  (defadvice rspec-compile (around rspec-compile-around)
    "Use BASH shell for running the specs because of ZSH issues."
    (let ((shell-file-name "/bin/bash"))
      ad-do-it))
  (ad-activate 'rspec-compile)
#+end_src

** Packages
*** better-defaults

    I started with Emacs Starter Kit, and am following its progression
    from v1 to v2 and, now, v3. In v3 the esk becomes prose only, and
    identifies =better-defaults= as a single package with "universal
    appeal."

*** diminish

    In Emacs, the "mode line" shows you information about the active
    major and any active minor modes. In some cases this is helpful
    and in other cases this is just "noise." The diminish library
    allows you to eliminate (or change) contributions that packages
    make to the mode line.

    I found out about it through this [[http://whattheemacsd.com/init.el-04.html][post]]. It lives [[http://www.eskimo.com/~seldon/diminish.el][here]].

    You can see which modes have been diminished with
    =diminished-modes=.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
  (eval-after-load "project-persist" '(diminish 'project-persist-mode))
  (diminish 'auto-fill-function)
  (diminish 'smartparens-mode)
#+END_SRC

*** rvm

    For emacs, on a MacOS, I believe the following configures my setup
    so that I'll use the default ruby provided by RVM when I need
    ruby.

#+begin_src emacs-lisp
  (rvm-use-default)
#+end_src

    I was reading a [[http://devblog.avdi.org/2011/10/11/rvm-el-and-inf-ruby-emacs-reboot-14/][blog post by Avdi Grimm about how he was using RVM]]
    the other day, and that's where I picked up the following helpful
    snippet that works with the emacs rvm subsystem to activate the
    correct version of ruby each time you open a ruby-based file:

#+begin_src emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda () (rvm-activate-corresponding-ruby)))
#+end_src

*** expand-region

    The functionality from =expand-region= is most easily described by
    watching the excellent emacsrocks.com [[http://emacsrocks.com/e09.html][Introductory Video]]. The
    project is hosted on [[https://github.com/magnars/expand-region.el][github]], and I use a standard setup for it,
    which means that you get things started by pressing =C-==.

#+begin_src emacs-lisp
  (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

*** multiple-cursors

    This video, http://emacsrocks.com/e13.html, blew my
    mind. Especially the writeable dired. Hah!

    I'm not sure how to use this mode yet, or what the right bindings
    are, but I think the main functions are:

    + mc/mark-next-like-this
    + mc/mark-all-like-this
    + mc/edit-lines

*** helm

    I've recently switched from a combination of smex and ido to
    [[https://github.com/emacs-helm/helm][helm]]. My central motivation was to get toward "a single vertical
    line" per choice, and to gain access to the number of plugins.

    Here's my basic helm setup. We begin with initialization:

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)
#+END_SRC

    Use helm for command completion:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

    Use helm for buffer selection:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'helm-mini)
#+END_SRC

    Use helm for viewing and selecting the contents in the kill ring:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

    I'm not sure about these- they come from [[https://tuhdo.github.io/helm-intro.html][this introduction]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c h s") 'helm-semantic-or-imenu)

  ;; Don't use marks or mark-ring. Start?
  (global-set-key (kbd "C-c m") 'helm-all-mark-rings)
  (global-set-key (kbd "C-c h o") 'helm-occur)

  ;; Don't use eshell. Start?
  (add-hook 'eshell-mode-hook
            #'(lambda ()
                (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))
#+END_SRC

    Make it so that pressing TAB while using helm will visit the
    buffer / file / whatever. The default key binding for this is
    C-z, and so we swap that out with what TAB used to do.

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)
#+END_SRC

    Activate helm everywhere.

#+BEGIN_SRC emacs-lisp
  (helm-mode 1)
#+END_SRC

*** company-mode

    When it comes to completion, I was considering [[http://cx4a.org/software/auto-complete/][auto-complete]] and
    [[https://company-mode.github.io/][company-mode]]. I'm trying company-mode for now.

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

    And this is my main keybinding for starting things up. It used to
    be "hippie-expand:"

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete)
#+END_SRC

** Functional Areas
*** Project Management

    My typical setup has dozens of projects all underneath two or
    three common directories. The setup I am using here gives me fuzzy
    search across all projects, and once I pick a project, I can get
    fuzzy search across all files within.

    This is achieved, primarily, by software written by [[https://github.com/rdallasgray][rdallasgray]]
    and [[https://github.com/bbatsov][bbatsov]].

    I can switch between projects with [[https://github.com/rdallasgray/project-persist][project-persist]]. Once I'm in a
    project, [[https://github.com/bbatsov/projectile][projectile]] helps me find files.

**** projectile

#+BEGIN_SRC emacs-lisp
  (require 'projectile)
#+END_SRC

**** project-persist

     [[https://github.com/rdallasgray/project-persist][project-persist]] is a lightweight means for keeping track of
     projects. Projects have names and a location on your file
     system. Optionally, they can have settings associated with them.

     That said, you can use project-persist to find a project and
     close a project, and project-persist provides hooks into these
     events.

***** Basic Installation

#+BEGIN_SRC emacs-lisp
  (project-persist-mode t)
#+END_SRC

***** File System Integration

      I layout code on my computer in the following manner:

       + ~/c/misc :: Miscellaneous projects live here.
       + ~/c/personal :: Personal projects live here.
       + ~/d :: Code that I don't author, but that I look at
                semi-regularly lives here.

      For example, if I checkout the source for rake on my computer
      and I just scan through it, it lives at =~/d/rake/=. If I am
      actively working on a project named reveal-ck, it lives at
      =~/c/personal/reveal-ck/=.

      I capture these locations in =jedcn/pp-project-roots=.

      The following code scans through these directories and builds
      project-persist entries for each directory that is found. The
      main interactive entry point is =jedcn-pp/rebuild-projects=.

#+BEGIN_SRC emacs-lisp
  (require 'project-persist)

  (setq jedcn/pp-project-roots
        (list "/opt/init-src"
              (concat (getenv "HOME") "/c/galileo")
              (concat (getenv "HOME") "/c/misc")
              (concat (getenv "HOME") "/c/personal")
              (concat (getenv "HOME") "/d")))

  (defun jedcn/pp-create-projects-under-root (root)
    "Create project-persist projects for directories under root"
    (let* ((dirs (directory-files root))
           (dir (car dirs))
           (ignore-dirs '("." ".." ".DS_Store")))
      (while dirs
        (unless (member dir ignore-dirs)
          (unless (pp/project-exists dir)
            (let ((dir-path (concat root "/" dir "/")))
              (if (file-directory-p dir-path)
                  (pp/project-setup dir-path dir)))))
        (setq dirs (cdr dirs))
        (setq dir (car dirs)))))

  (defun jedcn/pp-create-all-projects (project-roots)
    "Create all project-persist projects based on PROJECT-ROOTS"
    (let* ((project-root (car project-roots)))
      (while project-roots
        (when (file-exists-p project-root)
          (jedcn/pp-create-projects-under-root project-root))
        (setq project-roots (cdr project-roots))
        (setq project-root (car project-roots)))))

  (defun jedcn/pp-destroy-all-projects ()
    "Remove all previously created project-persist projects"
    (let ((projects (pp/project-list)))
      (while projects
        (pp/project-destroy (car projects))
        (setq projects (cdr projects)))))

  (defun jedcn-pp/rebuild-projects ()
    (interactive)
    (if (jedcn-pp/project-persist-initialized-p)
      (jedcn/pp-destroy-all-projects))
    (jedcn/pp-create-all-projects jedcn/pp-project-roots))

  (defun jedcn-pp/project-persist-initialized-p ()
    "Has project-persist been initialized?"
    (file-directory-p project-persist-settings-dir))

  (unless (jedcn-pp/project-persist-initialized-p)
    (message "Initializing Project Persist.")
    (jedcn-pp/rebuild-projects))
#+END_SRC

***** Hooks

      project-persist is intentionally minimal, so, to get something
      out of it you need to register hooks into its main events. These
      revolve around project management.

      The hooks are:

      + project-persist-before-load-hook
      + project-persist-after-close-hook
      + project-persist-after-load-hook
      + project-persist-after-save-hook

      The hook my setup uses is defined below.

#+BEGIN_SRC emacs-lisp
  (defun jedcn-after-open-project (dir)
    "Open up a dired for that project."
    (dired dir))

  (add-hook 'project-persist-after-load-hook
            (lambda ()
              (jedcn-after-open-project project-persist-current-project-root-dir)))
#+END_SRC

***** Key Bindings

      The goal is to have a single binding to open a project, and a
      another binding to find a file within a project.

      Right now they are:

      1. =C-c p=: Mnemonic: Choose Project
      2. =C-c f=: Mnemonic: Choose File

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cp"
                  'helm-project-persist)

  (global-set-key "\C-cf"
                  'helm-projectile)
#+END_SRC
