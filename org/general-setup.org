* General

** Package Repository

   Extensions for emacs are known as "packages," and emacs has a built
   in package management system. Emacs lisp packages are stored in
   archives (elpas) and, initially, emacs knows about a single such
   archive: http://elpa.gnu.org. This archive has approximately 50
   packages.  However, there are additional elpas out there, and I
   have had good luck finding up-to-date packages in
   http://melpa.milkbox.net/.

   That said, before I open up emacs for the first time on a new
   machine, I ensure that there's a =~/.emacs.d/Cask= file present and
   I've run =cask install= from a termianl when I am in my
   =~/.emacs.d= directory.

   My Cask file determines where I get packages from, and it calls out
   which packages I want installed.

** PATH

   Emacs can run shell commands on your behalf. When it does this, it
   needs to know about the equivalent of your PATH so it can find
   commands.

   I am not sure how this works. There is something that is an
   environment variabled named =PATH= that is reachable via =(getenv
   "PATH")= and there is something else that is a elisp variable named
   =exec-path=.

   Rather than interact with my shell and have Emacs learn values from
   a =$PATH= proper, I am explicit about setting both:


   #+BEGIN_SRC emacs-lisp
     (setq jedcn-env-path "/opt/boxen/rbenv/shims:/opt/boxen/nodenv/shims:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/texbin:/usr/local/share/npm/bin")

     (defun jedcn-sync-env-path-and-exec-path (desired-path)
       "Sets exec-path and env 'PATH' based on DESIRED-PATH"
       (setenv "PATH" desired-path)
       (setq exec-path (split-string desired-path ":")))

     (jedcn-sync-env-path-and-exec-path jedcn-env-path)
   #+END_SRC

** Shell

   The following gives us a "login" shell. Without being quite sure
   what that means, I know that when this is in place my shell init
   files are run, my prompt looks normal, etc.

   #+BEGIN_SRC emacs-lisp
     (setq explicit-bash-args '("--noediting" "--login"))
   #+END_SRC

** Ruby and Node

   When I'm on MacOS I use rbenv and nodenv for get ruby and node
   installations. These projects allow you to have many rubies/nodes,
   and they use environment variables to figure out which single
   version should be the default version if there's no project
   specific file. And so, the following lines let me call out what I
   want to use:

   #+BEGIN_SRC emacs-lisp
     (setenv "NODENV_VERSION" "v0.10")
     (setenv "RBENV_VERSION" "2.1.2")
   #+END_SRC

   This is particularly helpful for flycheck-mode-- I can install
   rubocop with 2.1.2 and get linting/style help in emacs. Or I can
   install jshint with v0.10 and get the same for .js.

** UTF-8

  I picked this up from Magnars in his [[https://github.com/magnars/.emacs.d/blob/master/sane-defaults.el][sane-defaults.el]].

  #+BEGIN_SRC emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-language-environment 'utf-8)
    (set-default-coding-systems 'utf-8)
  #+END_SRC

** Start Server

   Emacs is often run for hours (or days, or weeks) at a time. One of
   the benefits of such a long-lived process is that you can build a
   small tool, like =emacsclient= that can connect to a running emacs
   and request that something be edited. For example, you can tell git
   that it should use =emacsclient= whenever it needs to edit
   something:


   #+BEGIN_SRC sh :tangle no
     git config --global core.editor /usr/local/bin/emacsclient
   #+END_SRC

   That said, here's the elisp that starts up an emacs server if it
   is needed:

   #+BEGIN_SRC emacs-lisp
     (require 'server)
     (if (server-running-p)
         (message "Server is running")
       (progn
         (message "Starting server")
         (server-start)))
   #+END_SRC

** Save Place

  I got this one from Magnars: [[http://whattheemacsd.com/init.el-03.html][init.el-03]].

  #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
    (setq save-place-file (expand-file-name ".places" user-emacs-directory))
  #+END_SRC

** Appearance

*** Color Theme

    I *really* like the =moe-theme=. It can be found here:
    https://github.com/kuanyui/moe-theme.el. It's what I'm using for
    now.

    However, I pay close attention to themes, and ones that I've liked
    in the past can be added back by putting the following in my
    =Cask=:

    + =(depends-on "base16-theme")=
    + =(depends-on "color-theme-sanityinc-tomorrow")=
    + =(depends-on "color-theme-solarized")=
    + =(depends-on "monokai-theme")=

    #+BEGIN_SRC emacs-lisp
      (require 'moe-theme)
      (moe-theme-random-color)
      (moe-dark)
    #+END_SRC

*** Font

    I like a bigger font (say, 18) and I vary between "Monaco-18" or
    "Menlo-18".

    #+BEGIN_SRC emacs-lisp
      (if window-system
          (set-face-attribute 'default nil :font "Menlo-18"))
    #+END_SRC

*** Mode Line

    I'll often switch to =powerline-center-evil-theme= if I need to
    concentrate. There's basically 0 information there.

    #+BEGIN_SRC emacs-lisp
      (require 'powerline)
      (powerline-moe-theme)
    #+END_SRC

** Memory

   I believe that Emacs will initiate Garbage Collection every time
   the =gc-cons-threshold= is allocated. That's less than 1MB. I've
   got 16GB, so I'm flush with memory if it speeds up my Emacs.

   This comes from Lewang's [[https://github.com/lewang/flx][documentation on flx]].

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+END_SRC
