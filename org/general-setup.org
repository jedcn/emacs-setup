* General

** Package Repository

   Extensions for emacs are known as "packages," and emacs has a built
   in package management system. Emacs lisp packages are stored in
   archives (elpas) and, initially, emacs knows about a single such
   archive: http://elpa.gnu.org. This archive has approximately 50
   packages.  However, there are additional elpas out there, and I
   have had good luck finding up-to-date packages in
   http://melpa.milkbox.net/.

   That said, each time I open up emacs I make sure that the package
   management system is initialized before I configure it to use
   melpa:

#+begin_src emacs-lisp
  (package-initialize)

  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+end_src

   My observation is that packages cannot be installed until a
   repository is contacted, at least once, and an overview of the
   contents are downloaded and cached locally.

   The following elisp will run =package-list-packages= if
   =~/.emacs.d/elpa= does not exist, and is rooted in the belief that
   the first time you run =package-list-packages= the contents of the
   archive are cached within =~/.emacs.d/elpa=.

#+begin_src emacs-lisp
  (unless
      (file-directory-p "~/.emacs.d/elpa")
    (package-list-packages))
#+end_src

   I am interested in ensuring that the elpa cache has been created so
   that I can programatically install packages. I first read about
   this in Sacha Chua's excellent blog post on her configuration:
   [[http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/][Literate programming and my Emacs configuration file]]. She defines a
   function (copied below) that will install the package if it is not
   present:

#+begin_src emacs-lisp
  (defun sacha/package-install (package &optional repository)
    "Install PACKAGE if it has not yet been installed.
  If REPOSITORY is specified, use that."
    (unless (package-installed-p package)
      (let ((package-archives (if repository
                                  (list (assoc repository package-archives))
                                package-archives)))
      (package-install package))))
#+end_src

   In combination, these facilities are the foundation of my package
   management strategy: initialize the subsystem, configure the
   repositories, and then define a means to programatically install
   missing packages. Doing this early on in my initialization process
   means that code which follows can state, "I expect to have package
   XYZ," by saying, =(sacha/package-install "XYZ")= and then presume
   that XYZ is present.

** PATH

   Emacs can run shell commands on your behalf. When it does this, it
   needs to know about the equivalent of your PATH so it can find
   commands.

   I am not sure how this works. There is something that is an
   environment variabled named =PATH= that is reachable via =(getenv
   "PATH")= and there is something else that is a elisp variable named
   =exec-path=.

   Rather than interact with my shell and have Emacs learn values from
   a =$PATH= proper, I am explicit about setting both:

#+begin_src emacs-lisp
  (setq jedcn-env-path "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/texbin:/usr/local/share/npm/bin")

  (defun jedcn-sync-env-path-and-exec-path (desired-path)
    "Sets exec-path and env 'PATH' based on DESIRED-PATH"
    (setenv "PATH" desired-path)
    (setq exec-path (split-string desired-path ":")))

  (jedcn-sync-env-path-and-exec-path jedcn-env-path)
#+end_src
** Shell

   The following gives us a "login" shell. Without being quite sure
   what that means, I know that when this is in place my shell init
   files are run, my prompt looks normal, etc.

#+BEGIN_SRC emacs-lisp
  (setq explicit-bash-args '("--noediting" "--login"))
#+END_SRC

** UTF-8

  I picked this up from Magnars in his [[https://github.com/magnars/.emacs.d/blob/master/sane-defaults.el][sane-defaults.el]].

#+begin_src emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-language-environment 'utf-8)
    (set-default-coding-systems 'utf-8)
#+end_src

** Start Server

   Emacs is often run for hours (or days, or weeks) at a time. One of
   the benefits of such a long-lived process is that you can build a
   small tool, like =emacsclient= that can connect to a running emacs
   and request that something be edited. For example, you can tell git
   that it should use =emacsclient= whenever it needs to edit
   something:

#+begin_src sh :tangle no
  git config --global core.editor /usr/local/bin/emacsclient
#+end_src

   That said, here's the elisp that starts up an emacs server if it
   is needed:

#+begin_src emacs-lisp
  (require 'server)
  (if (server-running-p)
      (message "Server is running")
    (progn
      (message "Starting server")
      (server-start)))
#+end_src

** Save Place

  I got this one from Magnars: [[http://whattheemacsd.com/init.el-03.html][init.el-03]].

#+begin_src emacs-lisp
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+end_src
** Appearance

*** Color Theme

    Zenburn and Base16 are great. I'm trying out color-theme-solarized
    because of Graphene and [[https://github.com/rdallasgray/.emacs.d/blob/master/init.el#L300][rdallasgray]].

    Regardless, bring in some categories of themes and load a random
    one each time we start up. This happens every time I start emacs
    but also every time I invoke =new-emacs-instance=.

#+BEGIN_SRC emacs-lisp
  (sacha/package-install 'zenburn-theme)
  (sacha/package-install 'base16-theme)
  (sacha/package-install 'color-theme-solarized)
  (sacha/package-install 'monokai-theme)

  (setq jedcn-themes '(base16-chalk
                       base16-default
                       base16-eighties
                       base16-monokai
                       base16-railscasts
                       base16-tomorrow
                       monokai
                       solarized-dark
                       solarized-light
                       tango-dark
                       wombat
                       zenburn
                       ))

  (if window-system
      (load-theme
       (nth (random (length jedcn-themes))
            jedcn-themes)
       t)
    (load-theme 'zenburn t))
#+END_SRC

*** Font

    I like a bigger font (say, 18) and I vary between "Monaco-18" or
    "Menlo-18".

#+begin_src emacs-lisp
  (if window-system
      (set-face-attribute 'default nil :font "Menlo-18"))
#+end_src

*** Mode Line

#+BEGIN_SRC emacs-lisp
  (sacha/package-install 'powerline)
  (require 'powerline)
  (powerline-center-theme)
#+END_SRC

** Memory

   I believe that Emacs will initiate Garbage Collection every time
   the =gc-cons-threshold= is allocated. That's less than 1MB. I've
   got 16GB, so I'm flush with memory if it speeds up my Emacs.

   This comes from Lewang's [[https://github.com/lewang/flx][documentation on flx]].

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC
